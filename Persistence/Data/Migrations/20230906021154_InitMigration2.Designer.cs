// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(RayoMcQueenDbContext))]
    [Migration("20230906021154_InitMigration2")]
    partial class InitMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domine.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NameCountry")
                        .IsUnique();

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.PayRollType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NameType")
                        .IsUnique();

                    b.ToTable("PayRollType", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AgePerson")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FKIdPayRollType")
                        .HasColumnType("int");

                    b.Property<int>("FKIdPlayer")
                        .HasColumnType("int");

                    b.Property<int>("FKIdTeam")
                        .HasColumnType("int");

                    b.Property<string>("FirstNamePerson")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastNamePerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FKIdPayRollType");

                    b.HasIndex("FKIdPlayer")
                        .IsUnique();

                    b.HasIndex("FKIdTeam");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dorsal")
                        .HasColumnType("int");

                    b.Property<int>("FKIdPerson")
                        .HasColumnType("int");

                    b.Property<int?>("PayRollTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PayRollTypeId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.PlayerPosition", b =>
                {
                    b.Property<int>("FKIdPlayer")
                        .HasColumnType("int");

                    b.Property<int>("FKIdPosition")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("FKIdPlayer", "FKIdPosition");

                    b.HasIndex("FKIdPosition");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PositionId");

                    b.ToTable("PlayerPosition", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NamePosition")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NamePosition")
                        .IsUnique();

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FKIdCountry")
                        .HasColumnType("int");

                    b.Property<string>("NameTeam")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FKIdCountry");

                    b.HasIndex("NameTeam")
                        .IsUnique();

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("Domine.Entities.Person", b =>
                {
                    b.HasOne("Domine.Entities.PayRollType", "PayRollType")
                        .WithMany("People")
                        .HasForeignKey("FKIdPayRollType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domine.Entities.Player", "Player")
                        .WithOne("Person")
                        .HasForeignKey("Domine.Entities.Person", "FKIdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domine.Entities.Team", "Team")
                        .WithMany("People")
                        .HasForeignKey("FKIdTeam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayRollType");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domine.Entities.Player", b =>
                {
                    b.HasOne("Domine.Entities.PayRollType", null)
                        .WithMany("Players")
                        .HasForeignKey("PayRollTypeId");
                });

            modelBuilder.Entity("Domine.Entities.PlayerPosition", b =>
                {
                    b.HasOne("Domine.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("FKIdPlayer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domine.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("FKIdPosition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domine.Entities.Person", null)
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PersonId");

                    b.HasOne("Domine.Entities.Player", null)
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PlayerId");

                    b.HasOne("Domine.Entities.Position", null)
                        .WithMany("PlayerPositions")
                        .HasForeignKey("PositionId");

                    b.Navigation("Player");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Domine.Entities.Team", b =>
                {
                    b.HasOne("Domine.Entities.Country", "Country")
                        .WithMany("Teams")
                        .HasForeignKey("FKIdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domine.Entities.Country", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domine.Entities.PayRollType", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("Domine.Entities.Person", b =>
                {
                    b.Navigation("PlayerPositions");
                });

            modelBuilder.Entity("Domine.Entities.Player", b =>
                {
                    b.Navigation("Person");

                    b.Navigation("PlayerPositions");
                });

            modelBuilder.Entity("Domine.Entities.Position", b =>
                {
                    b.Navigation("PlayerPositions");
                });

            modelBuilder.Entity("Domine.Entities.Team", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
